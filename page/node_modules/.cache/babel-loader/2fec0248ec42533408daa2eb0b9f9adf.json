{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Server-maxpower\\\\page\\\\src\\\\_useChat.js\";\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { colors } from '@material-ui/core';\nexport const SockContext = createContext();\nexport default function ChatProv(props) {\n  const socket = useRef();\n  const [chats, setChats] = useState([]);\n  useEffect(() => {\n    socket.current = io(\"http://localhost:5000\"); //socket.current.emit('client')\n\n    socket.current.emit('server_conn');\n    socket.current.on('client_message', data => {\n      console.log;\n    });\n    socket.current.on('new_client_conn', new_chat => {\n      setChats(chats => [...chats, new_chat]);\n    });\n    return () => {\n      socket.current.disconnect();\n    };\n  }, []);\n  useEffect(() => {\n    chatRef.current = [...chats];\n    console.log(chatRef.current);\n  }, [chats]);\n\n  const sendMessageServer = data => {\n    const new_msg = {\n      from: 0,\n      msg: data.text\n    };\n    addMessageToChat(data.to, new_msg);\n    socket.current.emit('server_message', data);\n  };\n\n  const addMessageToChat = (to, message) => {\n    let old = chats.slice();\n\n    for (let c of old) {\n      if (c.socket_id === to) {\n        c.messages = [...c.messages, message];\n        break;\n      }\n    }\n\n    setChats(chats => old);\n  };\n\n  return /*#__PURE__*/React.createElement(SockContext.Provider, {\n    value: {\n      chats,\n      sendMessageServer\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, props.children);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/Server-maxpower/page/src/_useChat.js"],"names":["React","createContext","useState","useRef","useEffect","io","colors","SockContext","ChatProv","props","socket","chats","setChats","current","emit","on","data","console","log","new_chat","disconnect","chatRef","sendMessageServer","new_msg","from","msg","text","addMessageToChat","to","message","old","slice","c","socket_id","messages","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,MAAzC,EAAiDC,SAAjD,QAAkE,OAAlE;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,MAAT,QAAuB,mBAAvB;AAEA,OAAO,MAAMC,WAAW,GAAGN,aAAa,EAAjC;AAIP,eAAe,SAASO,QAAT,CAAkBC,KAAlB,EAAyB;AAEpC,QAAMC,MAAM,GAAGP,MAAM,EAArB;AAEA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AAGAE,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,MAAM,CAACG,OAAP,GAAiBR,EAAE,CAAC,uBAAD,CAAnB,CADY,CAGZ;;AACAK,IAAAA,MAAM,CAACG,OAAP,CAAeC,IAAf,CAAoB,aAApB;AAEAJ,IAAAA,MAAM,CAACG,OAAP,CAAeE,EAAf,CAAkB,gBAAlB,EAAqCC,IAAD,IAAU;AAC1CC,MAAAA,OAAO,CAACC,GAAR;AACH,KAFD;AAIAR,IAAAA,MAAM,CAACG,OAAP,CAAeE,EAAf,CAAkB,iBAAlB,EAAsCI,QAAD,IAAc;AAC/CP,MAAAA,QAAQ,CAACD,KAAK,IAAI,CAAC,GAAGA,KAAJ,EAAWQ,QAAX,CAAV,CAAR;AACH,KAFD;AAIA,WAAO,MAAM;AACTT,MAAAA,MAAM,CAACG,OAAP,CAAeO,UAAf;AACH,KAFD;AAGH,GAjBQ,EAiBN,EAjBM,CAAT;AAmBAhB,EAAAA,SAAS,CAAC,MAAM;AACZiB,IAAAA,OAAO,CAACR,OAAR,GAAkB,CAAC,GAAGF,KAAJ,CAAlB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYG,OAAO,CAACR,OAApB;AACH,GAHQ,EAGN,CAACF,KAAD,CAHM,CAAT;;AAKA,QAAMW,iBAAiB,GAAIN,IAAD,IAAU;AAChC,UAAMO,OAAO,GAAG;AAAEC,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,GAAG,EAAET,IAAI,CAACU;AAArB,KAAhB;AACAC,IAAAA,gBAAgB,CAACX,IAAI,CAACY,EAAN,EAAUL,OAAV,CAAhB;AACAb,IAAAA,MAAM,CAACG,OAAP,CAAeC,IAAf,CAAoB,gBAApB,EAAsCE,IAAtC;AACH,GAJD;;AAMA,QAAMW,gBAAgB,GAAG,CAACC,EAAD,EAAKC,OAAL,KAAiB;AAEtC,QAAIC,GAAG,GAAGnB,KAAK,CAACoB,KAAN,EAAV;;AACA,SAAK,IAAIC,CAAT,IAAcF,GAAd,EAAmB;AACf,UAAIE,CAAC,CAACC,SAAF,KAAgBL,EAApB,EAAwB;AACpBI,QAAAA,CAAC,CAACE,QAAF,GAAa,CAAC,GAAGF,CAAC,CAACE,QAAN,EAAgBL,OAAhB,CAAb;AACA;AACH;AACJ;;AACDjB,IAAAA,QAAQ,CAACD,KAAK,IAAImB,GAAV,CAAR;AACH,GAVD;;AAYA,sBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEnB,MAAAA,KAAF;AAASW,MAAAA;AAAT,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKb,KAAK,CAAC0B,QADX,CADJ;AAKH","sourcesContent":["import React, { createContext, useState, useRef, useEffect } from 'react'\r\nimport io from 'socket.io-client'\r\nimport { colors } from '@material-ui/core'\r\n\r\nexport const SockContext = createContext()\r\n\r\n\r\n\r\nexport default function ChatProv(props) {\r\n\r\n    const socket = useRef()\r\n\r\n    const [chats, setChats] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        socket.current = io(\"http://localhost:5000\")\r\n\r\n        //socket.current.emit('client')\r\n        socket.current.emit('server_conn')\r\n\r\n        socket.current.on('client_message', (data) => {\r\n            console.log\r\n        })\r\n\r\n        socket.current.on('new_client_conn', (new_chat) => {\r\n            setChats(chats => [...chats, new_chat])\r\n        })\r\n\r\n        return () => {\r\n            socket.current.disconnect()\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        chatRef.current = [...chats]\r\n        console.log(chatRef.current)\r\n    }, [chats])\r\n\r\n    const sendMessageServer = (data) => {\r\n        const new_msg = { from: 0, msg: data.text }\r\n        addMessageToChat(data.to, new_msg)\r\n        socket.current.emit('server_message', data)\r\n    }\r\n\r\n    const addMessageToChat = (to, message) => {\r\n\r\n        let old = chats.slice()\r\n        for (let c of old) {\r\n            if (c.socket_id === to) {\r\n                c.messages = [...c.messages, message]\r\n                break\r\n            }\r\n        }\r\n        setChats(chats => old)\r\n    }\r\n\r\n    return (\r\n        <SockContext.Provider value={{ chats, sendMessageServer }}>\r\n            {props.children}\r\n        </SockContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}