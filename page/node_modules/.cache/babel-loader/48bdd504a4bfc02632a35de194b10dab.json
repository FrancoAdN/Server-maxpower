{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\page\\\\src\\\\_useChat.js\";\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nexport const SockContext = createContext();\nexport default function ChatProv(props) {\n  const socket = useRef();\n  const d_chats = [{\n    socket_id: 'sock-1',\n    name: 'Franco',\n    messages: [{\n      from: 0,\n      msg: 'Bienvenido al chat de maxpower Franco'\n    }, {\n      from: 1,\n      msg: 'Bienvenido al chat de maxpower Franco'\n    }, {\n      from: 0,\n      msg: 'test Franco'\n    }]\n  }, {\n    socket_id: 'sock-2',\n    name: 'Tomas',\n    messages: [{\n      from: 0,\n      msg: 'Bienvenido al chat de maxpower Tomas'\n    }, {\n      from: 1,\n      msg: 'Hola server'\n    }, {\n      from: 1,\n      msg: 'pedido de cotizacion'\n    }]\n  }, {\n    socket_id: 'sock-3',\n    name: 'Leonel',\n    messages: [{\n      from: 0,\n      msg: 'Bienvenido al chat de maxpower Leonel'\n    }, {\n      from: 1,\n      msg: 'Hola maxpa'\n    }, {\n      from: 1,\n      msg: 'como va?'\n    }]\n  }];\n  const [chats, setChats] = useState(d_chats);\n  useEffect(() => {\n    socket.current = io(\"http://localhost:5000\"); //socket.current.emit('client')\n\n    socket.current.on(\"server_resp\", data => {\n      console.log(\"resp\", data);\n    });\n    return () => {\n      socket.current.disconnect();\n    };\n  }, []);\n\n  const sendMessageServer = data => {\n    const new_msg = {\n      from: 0,\n      msg: data.text\n    };\n    let old = chats.slice();\n\n    for (let c of old) {\n      if (c.socket_id === data.to) {\n        c.messages = [...c.messages, new_msg];\n        break;\n      }\n    }\n\n    setChats(chats => old);\n    socket.current.emit('server_message', data);\n    /*setMessages(messages => [...messages, data])\r\n    socket.current.emit(\"client_message\", data)*/\n  };\n\n  return /*#__PURE__*/React.createElement(SockContext.Provider, {\n    value: {\n      chats,\n      sendMessageServer\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, props.children);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/page/src/_useChat.js"],"names":["React","createContext","useState","useRef","useEffect","io","SockContext","ChatProv","props","socket","d_chats","socket_id","name","messages","from","msg","chats","setChats","current","on","data","console","log","disconnect","sendMessageServer","new_msg","text","old","slice","c","to","emit","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useRef, useEffect } from 'react'\r\nimport io from 'socket.io-client'\r\n\r\nexport const SockContext = createContext()\r\n\r\n\r\n\r\nexport default function ChatProv(props) {\r\n\r\n    const socket = useRef()\r\n\r\n    const d_chats = [\r\n        {\r\n            socket_id: 'sock-1',\r\n            name: 'Franco',\r\n            messages: [\r\n                { from: 0, msg: 'Bienvenido al chat de maxpower Franco' },\r\n                { from: 1, msg: 'Bienvenido al chat de maxpower Franco' },\r\n                { from: 0, msg: 'test Franco' }\r\n            ]\r\n        },\r\n        {\r\n            socket_id: 'sock-2',\r\n            name: 'Tomas',\r\n            messages: [\r\n                { from: 0, msg: 'Bienvenido al chat de maxpower Tomas' },\r\n                { from: 1, msg: 'Hola server' },\r\n                { from: 1, msg: 'pedido de cotizacion' }\r\n            ]\r\n        },\r\n        {\r\n            socket_id: 'sock-3',\r\n            name: 'Leonel',\r\n            messages: [\r\n                { from: 0, msg: 'Bienvenido al chat de maxpower Leonel' },\r\n                { from: 1, msg: 'Hola maxpa' },\r\n                { from: 1, msg: 'como va?' }\r\n            ]\r\n        },\r\n    ]\r\n    const [chats, setChats] = useState(d_chats)\r\n\r\n    useEffect(() => {\r\n        socket.current = io(\"http://localhost:5000\")\r\n\r\n        //socket.current.emit('client')\r\n\r\n        socket.current.on(\"server_resp\", (data) => {\r\n            console.log(\"resp\", data);\r\n        });\r\n\r\n        return () => {\r\n            socket.current.disconnect()\r\n        }\r\n    }, [])\r\n\r\n\r\n    const sendMessageServer = (data) => {\r\n\r\n        const new_msg = { from: 0, msg: data.text }\r\n        let old = chats.slice()\r\n        for (let c of old) {\r\n            if (c.socket_id === data.to) {\r\n                c.messages = [...c.messages, new_msg]\r\n                break\r\n            }\r\n        }\r\n        setChats(chats => old)\r\n        socket.current.emit('server_message', data)\r\n\r\n\r\n        /*setMessages(messages => [...messages, data])\r\n        socket.current.emit(\"client_message\", data)*/\r\n    };\r\n\r\n    return (\r\n        <SockContext.Provider value={{ chats, sendMessageServer }}>\r\n            {props.children}\r\n        </SockContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}