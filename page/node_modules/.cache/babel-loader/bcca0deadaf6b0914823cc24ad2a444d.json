{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Server-maxpower\\\\page\\\\src\\\\_useChat.js\";\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport io from 'socket.io-client';\nexport const SockContext = createContext();\nexport default function ChatProv(props) {\n  const socket = useRef();\n  /*const d_chats = [\r\n      {\r\n          socket_id: 'sock-1',\r\n          name: 'Franco',\r\n          messages: [\r\n              { from: 0, msg: 'Bienvenido al chat de maxpower Franco' },\r\n              { from: 1, msg: 'Bienvenido al chat de maxpower Franco' },\r\n              { from: 0, msg: 'test Franco' }\r\n          ]\r\n      },\r\n      {\r\n          socket_id: 'sock-2',\r\n          name: 'Tomas',\r\n          messages: [\r\n              { from: 0, msg: 'Bienvenido al chat de maxpower Tomas' },\r\n              { from: 1, msg: 'Hola server' },\r\n              { from: 1, msg: 'pedido de cotizacion' }\r\n          ]\r\n      },\r\n      {\r\n          socket_id: 'sock-3',\r\n          name: 'Leonel',\r\n          messages: [\r\n              { from: 0, msg: 'Bienvenido al chat de maxpower Leonel' },\r\n              { from: 1, msg: 'Hola maxpa' },\r\n              { from: 1, msg: 'como va?' }\r\n          ]\r\n      },\r\n  ]*/\n\n  const [chats, setChats] = useState([]);\n  useEffect(() => {\n    socket.current = io(\"http://localhost:5000\"); //socket.current.emit('client')\n\n    socket.current.emit('server_conn');\n    socket.current.on('new_client_conn', new_chat => {\n      setChats(chats => [...chats, new_chat]);\n    });\n    socket.current.on('client_message', data => {\n      clientMessage();\n      /*const new_msg = { from: 1, msg: data.msg }\r\n      console.log(new_msg)*/\n    });\n    /*socket.current.on(\"server_resp\", (data) => {\r\n        console.log(\"resp\", data);\r\n    });*/\n\n    return () => {\n      socket.current.disconnect();\n    };\n  }, []);\n\n  const sendMessageServer = data => {\n    const new_msg = {\n      from: 0,\n      msg: data.text\n    };\n    addMessageToChat(data.to, new_msg);\n    socket.current.emit('server_message', data);\n  };\n\n  const addMessageToChat = (to, message) => {\n    let old = chats.slice();\n\n    for (let c of old) {\n      if (c.socket_id === to) {\n        c.messages = [...c.messages, message];\n        break;\n      }\n    }\n\n    setChats(chats => old);\n  };\n\n  const clientMessage = () => {\n    console.log(chats);\n  };\n\n  return /*#__PURE__*/React.createElement(SockContext.Provider, {\n    value: {\n      chats,\n      sendMessageServer\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, props.children);\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/Server-maxpower/page/src/_useChat.js"],"names":["React","createContext","useState","useRef","useEffect","io","SockContext","ChatProv","props","socket","chats","setChats","current","emit","on","new_chat","data","clientMessage","disconnect","sendMessageServer","new_msg","from","msg","text","addMessageToChat","to","message","old","slice","c","socket_id","messages","console","log","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,MAAzC,EAAiDC,SAAjD,QAAkE,OAAlE;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,OAAO,MAAMC,WAAW,GAAGL,aAAa,EAAjC;AAIP,eAAe,SAASM,QAAT,CAAkBC,KAAlB,EAAyB;AAEpC,QAAMC,MAAM,GAAGN,MAAM,EAArB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,MAAM,CAACG,OAAP,GAAiBP,EAAE,CAAC,uBAAD,CAAnB,CADY,CAGZ;;AACAI,IAAAA,MAAM,CAACG,OAAP,CAAeC,IAAf,CAAoB,aAApB;AAEAJ,IAAAA,MAAM,CAACG,OAAP,CAAeE,EAAf,CAAkB,iBAAlB,EAAsCC,QAAD,IAAc;AAC/CJ,MAAAA,QAAQ,CAACD,KAAK,IAAI,CAAC,GAAGA,KAAJ,EAAWK,QAAX,CAAV,CAAR;AACH,KAFD;AAIAN,IAAAA,MAAM,CAACG,OAAP,CAAeE,EAAf,CAAkB,gBAAlB,EAAqCE,IAAD,IAAU;AAC1CC,MAAAA,aAAa;AACb;;AAKH,KAPD;AASA;;;;AAIA,WAAO,MAAM;AACTR,MAAAA,MAAM,CAACG,OAAP,CAAeM,UAAf;AACH,KAFD;AAGH,GA1BQ,EA0BN,EA1BM,CAAT;;AA6BA,QAAMC,iBAAiB,GAAIH,IAAD,IAAU;AAChC,UAAMI,OAAO,GAAG;AAAEC,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,GAAG,EAAEN,IAAI,CAACO;AAArB,KAAhB;AACAC,IAAAA,gBAAgB,CAACR,IAAI,CAACS,EAAN,EAAUL,OAAV,CAAhB;AACAX,IAAAA,MAAM,CAACG,OAAP,CAAeC,IAAf,CAAoB,gBAApB,EAAsCG,IAAtC;AACH,GAJD;;AAMA,QAAMQ,gBAAgB,GAAG,CAACC,EAAD,EAAKC,OAAL,KAAiB;AAEtC,QAAIC,GAAG,GAAGjB,KAAK,CAACkB,KAAN,EAAV;;AACA,SAAK,IAAIC,CAAT,IAAcF,GAAd,EAAmB;AACf,UAAIE,CAAC,CAACC,SAAF,KAAgBL,EAApB,EAAwB;AACpBI,QAAAA,CAAC,CAACE,QAAF,GAAa,CAAC,GAAGF,CAAC,CAACE,QAAN,EAAgBL,OAAhB,CAAb;AACA;AACH;AACJ;;AACDf,IAAAA,QAAQ,CAACD,KAAK,IAAIiB,GAAV,CAAR;AAEH,GAXD;;AAYA,QAAMV,aAAa,GAAG,MAAM;AACxBe,IAAAA,OAAO,CAACC,GAAR,CAAYvB,KAAZ;AACH,GAFD;;AAIA,sBACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEA,MAAAA,KAAF;AAASS,MAAAA;AAAT,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKX,KAAK,CAAC0B,QADX,CADJ;AAKH","sourcesContent":["import React, { createContext, useState, useRef, useEffect } from 'react'\r\nimport io from 'socket.io-client'\r\n\r\nexport const SockContext = createContext()\r\n\r\n\r\n\r\nexport default function ChatProv(props) {\r\n\r\n    const socket = useRef()\r\n\r\n    /*const d_chats = [\r\n        {\r\n            socket_id: 'sock-1',\r\n            name: 'Franco',\r\n            messages: [\r\n                { from: 0, msg: 'Bienvenido al chat de maxpower Franco' },\r\n                { from: 1, msg: 'Bienvenido al chat de maxpower Franco' },\r\n                { from: 0, msg: 'test Franco' }\r\n            ]\r\n        },\r\n        {\r\n            socket_id: 'sock-2',\r\n            name: 'Tomas',\r\n            messages: [\r\n                { from: 0, msg: 'Bienvenido al chat de maxpower Tomas' },\r\n                { from: 1, msg: 'Hola server' },\r\n                { from: 1, msg: 'pedido de cotizacion' }\r\n            ]\r\n        },\r\n        {\r\n            socket_id: 'sock-3',\r\n            name: 'Leonel',\r\n            messages: [\r\n                { from: 0, msg: 'Bienvenido al chat de maxpower Leonel' },\r\n                { from: 1, msg: 'Hola maxpa' },\r\n                { from: 1, msg: 'como va?' }\r\n            ]\r\n        },\r\n    ]*/\r\n    const [chats, setChats] = useState([])\r\n\r\n    useEffect(() => {\r\n        socket.current = io(\"http://localhost:5000\")\r\n\r\n        //socket.current.emit('client')\r\n        socket.current.emit('server_conn')\r\n\r\n        socket.current.on('new_client_conn', (new_chat) => {\r\n            setChats(chats => [...chats, new_chat])\r\n        })\r\n\r\n        socket.current.on('client_message', (data) => {\r\n            clientMessage()\r\n            /*const new_msg = { from: 1, msg: data.msg }\r\n            console.log(new_msg)*/\r\n\r\n\r\n\r\n        })\r\n\r\n        /*socket.current.on(\"server_resp\", (data) => {\r\n            console.log(\"resp\", data);\r\n        });*/\r\n\r\n        return () => {\r\n            socket.current.disconnect()\r\n        }\r\n    }, [])\r\n\r\n\r\n    const sendMessageServer = (data) => {\r\n        const new_msg = { from: 0, msg: data.text }\r\n        addMessageToChat(data.to, new_msg)\r\n        socket.current.emit('server_message', data)\r\n    }\r\n\r\n    const addMessageToChat = (to, message) => {\r\n\r\n        let old = chats.slice()\r\n        for (let c of old) {\r\n            if (c.socket_id === to) {\r\n                c.messages = [...c.messages, message]\r\n                break\r\n            }\r\n        }\r\n        setChats(chats => old)\r\n\r\n    }\r\n    const clientMessage = () => {\r\n        console.log(chats)\r\n    }\r\n\r\n    return (\r\n        <SockContext.Provider value={{ chats, sendMessageServer }}>\r\n            {props.children}\r\n        </SockContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}